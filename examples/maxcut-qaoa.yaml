# Workflow API version
apiVersion: io.orquestra.workflow/1.0.0

# Prefix for workflow ID
name: maxcut-qaoa

imports:
- name: z-quantum-core
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/z-quantum-core.git"
    branch: "workflow-v1"
- name: qe-openfermion
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/qe-openfermion.git"
    branch: "v1-revisions"
- name: z-quantum-qaoa
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/z-quantum-qaoa.git"
    branch: "workflow-v1"
- name: z-quantum-optimizers
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/z-quantum-optimizers.git"
    branch: "workflow-v1"
- name: z-quantum-estimators
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/z-quantum-estimators.git"
    branch: "workflow-v1"
- name: qe-forest
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/qe-forest.git"
    branch: "workflow-v1"

steps:
- name: generate-graph
  config:
    runtime:
      language: python3
      imports: [z-quantum-core]
      parameters:
        file: z-quantum-core/steps/graph.py
        function: generate_random_graph_erdos_renyi
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
  - number_of_nodes: 5
    type: int
  - edge_probability: 0.8
    type: float
  - random_weights: False
    type: bool
  - seed: "None"
    type: string
  outputs:
  - name: graph
    type: graph

- name: get-maxcut-hamiltonian
  passed: [generate-graph]
  config:
    runtime:
      language: python3
      imports: [z-quantum-core, qe-openfermion, z-quantum-qaoa]
      parameters:
        file: z-quantum-qaoa/steps/qaoa.py
        function: get_maxcut_hamiltonian
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
  - graph: ((generate-graph.graph))
    type: graph
  - scaling: 0.9
    type: float
  - shifted: False
    type: bool
  outputs:
  - name: hamiltonian
    type: qubit-operator

- name: get-grid
  config:
    runtime:
      language: python3
      imports: [z-quantum-core]
      parameters:
        file: z-quantum-core/steps/circuit.py
        function: build_uniform_param_grid
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
  - ansatz_specs: "None"
    type: string
  - number_of_params_per_layer: 2
    type: int
  - number_of_layers: 1
    type: int
  - min_value: 0
    type: int
  - max_value: 3.14159265359
    type: float
  - step: 0.314159265359
    type: float
  outputs:
  - name: parameter-grid
    type: grid

- name: generate-random-initial-ansatz-params
  config:
    runtime:
      language: python3
      imports: [z-quantum-core]
      parameters:
        file: z-quantum-core/steps/circuit.py
        function: generate_random_ansatz_params
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
  - ansatz_specs: "None"
    type: string
  - number_of_parameters: 2
    type: int
  - min_value: 0
    type: int
  - max_value: 3.14159265359
    type: float
  - seed: "None"
    type: string
  outputs:
  - name: params
    type: parameters

- name: generate-fixed-ansatz-params
  config:
    runtime:
      language: python3
      imports: [z-quantum-core]
      parameters:
        file: z-quantum-core/steps/circuit.py
        function: generate_random_ansatz_params
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
  - ansatz_specs: "None"
    type: string
  - number_of_parameters: 0
    type: int
  - min_value: -0.01
    type: float
  - max_value: 0.01
    type: float
  - seed: "None"
    type: string
  outputs:
  - name: params
    type: parameters

- name: optimize-variational-circuit
  passed: [get-maxcut-hamiltonian, get-grid, generate-random-initial-ansatz-params, generate-fixed-ansatz-params]
  config:
    runtime:
      language: python3
      imports: [z-quantum-core, z-quantum-optimizers, z-quantum-estimators, qe-openfermion, qe-forest, z-quantum-qaoa]
      parameters:
        file: z-quantum-optimizers/steps/optimizers.py
        function: optimize_variational_circuit
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
  - ansatz_specs: "{\"module_name\": \"zquantum.qaoa.farhi_ansatz\", \"function_name\": \"QAOAFarhiAnsatz\", \"number_of_layers\": 1}"
    type: string
  - backend_specs: "{\"module_name\": \"qeforest.simulator\", \"function_name\": \"ForestSimulator\", \"device_name\": \"wavefunction-simulator\"}"
    type: string
  - optimizer_specs: "{\"module_name\": \"zquantum.optimizers.grid_search\", \"function_name\": \"GridSearchOptimizer\", \"options\": {\"keep_value_history\": true}}"
    type: string
  - cost_function_specs: "{\"module_name\": \"zquantum.core.cost_function\", \"function_name\": \"AnsatzBasedCostFunction\", \"estimator-specs\": { \"module_name\": \"zquantum.core.estimator\", \"function_name\": \"ExactEstimator\"}}"
    type: string
  - qubit_operator: ((get-maxcut-hamiltonian.hamiltonian))
    type: qubit-operator
  - initial_parameters: ((generate-random-initial-ansatz-params.params))
    type: parameters
  - fixed_parameters: ((generate-fixed-ansatz-params.params))
    type: parameters
  - noise_model: "None"
    type: string
  - device_connectivity: "None"
    type: string
  - parameter_grid: ((get-grid.parameter-grid))
    type: grid
  - constraint_operator: "None"
    type: string
  outputs:
  - name: optimization-results
    type: optimization-results
  - name: optimized-parameters
    type: parameters

types:
- qubit-operator
- grid
- graph
- parameters
- optimization-results
