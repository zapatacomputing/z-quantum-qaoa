spec:
  templates:
  - name: get-maxcut-hamiltonian
    parent: generic-task
    inputs:
      parameters:
      - name: command
        value: python3 main_script.py
      artifacts:
      - name: graph
        path: /app/graph.json
      - name: main-script
        path: /app/main_script.py
        raw:
          data: |
            from zquantum.core.graph import load_graph
            from zquantum.qaoa.maxcut import get_maxcut_hamiltonian
            from qeopenfermion import save_qubit_operator
            graph = load_graph('graph.json')
            hamiltonian = get_maxcut_hamiltonian(graph)
            save_qubit_operator(hamiltonian,'hamiltonian.json')
    outputs:
      artifacts:
      - name: hamiltonian
        path: /app/hamiltonian.json

  - name: solve-maxcut-by-exhaustive-search
    parent: generic-task
    inputs:
      parameters:
      - name: command
        value: python3 main_script.py
      artifacts:
      - name: graph
        path: /app/graph.json
      - name: main-script
        path: /app/main_script.py
        raw:
          data: |
            from zquantum.core.graph import load_graph
            from zquantum.qaoa.maxcut import solve_maxcut_by_exhaustive_search
            graph = load_graph('graph.json')
            maxcut, solution_set = solve_maxcut_by_exhaustive_search(graph)
            print(maxcut)
            print(solution_set)
