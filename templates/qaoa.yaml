spec:
  templates:
  - name: get-maxcut-hamiltonian
    parent: generic-task
    inputs:
      parameters:
      - name: command
        value: python3 main_script.py
      - name: scaling
        default: "1.0"
      - name: shifted
        default: "False"
      artifacts:
      - name: graph
        path: /app/graph.json
      - name: main-script
        path: /app/main_script.py
        raw:
          data: |
            from zquantum.core.graph import load_graph
            from zquantum.qaoa.maxcut import get_maxcut_hamiltonian
            from qeopenfermion import save_qubit_operator
            graph = load_graph('graph.json')
            hamiltonian = get_maxcut_hamiltonian(graph, scaling={{inputs.parameters.scaling}}, shifted={{inputs.parameters.shifted}})
            save_qubit_operator(hamiltonian,'hamiltonian.json')
    outputs:
      artifacts:
      - name: hamiltonian
        path: /app/hamiltonian.json


  - name: generate-list-maxcut-hamiltonians
    parent: generic-task
    inputs:
      parameters:
      - name: command
        value: python3 main_script.py
      - name: graph-specs
      - name: number-of-instances
      - name: number-of-qubits
      - name: shifted
        default: "False"
      - name: scaling
        value: "1.0"       
      artifacts:
      - name: main-script
        path: /app/main_script.py
        raw:
          data: |
            from zquantum.qaoa.maxcut import get_random_maxcut_hamiltonians
            from qeopenfermion import save_qubit_operator_set
            hamiltonians = get_random_maxcut_hamiltonians(
                                    {{inputs.parameters.graph-specs}},
                                    {{inputs.parameters.number-of-instances}},
                                    {{inputs.parameters.number-of-qubits}},
                                    shifted = {{inputs.parameters.shifted}},
                                    scaling = {{inputs.parameters.scaling}}
                                )
            save_qubit_operator_set(hamiltonians, 'hamiltonians.json')
    outputs:
      artifacts:
      - name: hamiltonians
        path: /app/hamiltonians.json
        
  - name: generate-list-ansatzes-from-hamiltonians
    parent: generic-task
    inputs:
      parameters:
      - name: command
        value: python3 main_script.py
      - name: number-of-layers
      artifacts:
      - name: main-script
        path: /app/main_script.py
      - name: hamiltonians
        path: /app/hamiltonians.json    
        raw:
          data: |
            from zquantum.core.circuit import save_circuit_set
            from zquantum.qaoa.maxcut import create_farhi_qaoa_circuits
            from qeopenfermion import load_qubit_operator_set
            
            hamiltonians = load_qubit_operator_set('hamiltonians.json')
            circuits = create_farhi_qaoa_circuits(hamiltonians, {{inputs.parameters.number-of-layers}})
            save_circuit_set(circuits, 'circuits.json')
    outputs:
      artifacts:
      - name: circuits
        path: /app/circuits.json        

  - name: get-maxcut-hamiltonian
    parent: generic-task
    inputs:
      parameters:
      - name: command
        value: python3 main_script.py
      - name: scaling
        default: "1.0"
      - name: shifted
        default: "False"
      artifacts:
      - name: graph
        path: /app/graph.json
      - name: main-script
        path: /app/main_script.py
        raw:
          data: |
            from zquantum.core.graph import load_graph
            from zquantum.qaoa.maxcut import get_maxcut_hamiltonian
            from qeopenfermion import save_qubit_operator
            graph = load_graph('graph.json')
            hamiltonian = get_maxcut_hamiltonian(graph, scaling={{inputs.parameters.scaling}}, shifted={{inputs.parameters.shifted}})
            save_qubit_operator(hamiltonian,'hamiltonian.json')
    outputs:
      artifacts:
      - name: hamiltonian
        path: /app/hamiltonian.json
